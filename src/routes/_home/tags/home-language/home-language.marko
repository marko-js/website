import * as styles from "./home-language.style.module.scss";
static const EXAMPLE_HTML = `// HTML + JavaScript = ðŸ’œ
<let/count=0>
<button onClick() { count++ }>
  Clicked \${count} times
</button>
`;
static const EXAMPLE_CONCISE = `// HTML + JavaScript = ðŸ’œ
let/count=0
button onClick() { count++ }
  -- Clicked \${count} times
`;

section class=styles.section
  div class=styles.content
    h2
      span class=styles.headingText -- HTML Re&#8209;imagined
    p
      --
      Marko is HTML re&#8209;imagined as a language for building dynamic and reactive user interfaces.
      --
    p
      --
      Just about any valid HTML is valid Marko, but Marko extends the HTML language to allow building modern applications in a declarative way.
      --
    a href="/docs/introduction/welcome-to-marko" class=styles.cta -- Learn More

  figure class=styles.example
    app-code-block [
      theme="dark"
      lang="marko"
      text=EXAMPLE_HTML
      concise=EXAMPLE_CONCISE
    ]
    div class=styles.exampleOutput
      let/count=0
      button/inc onClick() {
        count++;
      }
        -- Clicked ${count} times

      let/autoclick=true
      if=autoclick
        let/cursorVisible=false
        img [
          src="./pointinghand.svg?no-inline"
          class=[styles.cursor, cursorVisible && styles.visible]
        ]
        html-comment
        script
          --
          let timeout = setTimeout(
            () => {
              cursorVisible = true;
              timeout = setTimeout(
                () => {
                  inc().classList.add(styles.active);
                  timeout = setTimeout(() => {
                    inc().classList.remove(styles.active);
                    count++;
                  }, 100);
                },
                200 + 200 * Math.random(),
              );
            },
            Math.random() > 0.66
              ? 0
              : (setTimeout(() => (cursorVisible = false), 700),
                2500 + 2500 * Math.random()),
          );
          $signal.onabort = () => {
            clearTimeout(timeout);
            inc().classList.remove(styles.active);
          };
          --
      script
        --
        inc().addEventListener("click", () => {
          autoclick = false;
        });
        const isReducedMotion = matchMedia("(prefers-reduced-motion: reduce)");
        const update = () => (autoclick = !isReducedMotion.matches);
        isReducedMotion.addEventListener("change", update);
        update();
        --
