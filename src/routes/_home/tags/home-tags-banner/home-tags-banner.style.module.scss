@use "app/styles/colors" as colors;

.section {
  @include colors.section("green");

  background-color: var(--color-black);
  margin: 0 calc(-1 * var(--root-gap));
  overflow: hidden;
  white-space: nowrap;
  background-color: color-mix(
    in srgb,
    var(--section-color-dark),
    var(--color-black) 95%
  );
}

.accelerator {
  transform: translateX(0);
  transition: transform 0.3s ease-out;

  &:hover {
    transform: translateX(-3px);
  }
}

.marquee {
  display: flex;
  width: fit-content;
  font-size: 1.7rem;
  gap: 1rem;
  padding: 1.5rem 0;
  will-change: transform;
  animation: marquee 300s linear infinite;
  @keyframes marquee {
    to {
      transform: translateX(-50%);
    }
  }
  @media (prefers-reduced-motion: reduce) {
    animation-play-state: paused;
  }
  @media (min-width: 64rem) {
    font-size: 1.9rem;
    gap: 3rem;
    padding: 2rem 0;
  }

  &:hover {
    animation-play-state: paused;
  }
}

.tag {
  padding: 1rem;
  color: #ffffff80;
  text-decoration: none;

  :global(.concise-mode) & {
    color: transparent;
  }

  &:hover .name {
    text-decoration: 2px underline currentColor;
  }
}

.name {
  color: var(--color-white);
}

.coreTag,
.customTag {
  composes: tag;
  $i: 1;
  @each $color in "blue", "green", "yellow", "red" {
    &:nth-of-type(8n + #{$i}) span {
      color: var(--color-#{$color}-light);
    }
    $i: $i + 2;
  }
}

.htmlTag {
  composes: tag;
  .name {
    color: #c999ec;
  }
}

.deprecatedTag {
  composes: tag;
  .name {
    text-decoration: underline wavy var(--color-red-light);
  }
}
