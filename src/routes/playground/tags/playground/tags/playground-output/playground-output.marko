import type { PlaygroundFile } from "../../playground.marko";
import { getPackageMetadata, getVersionFromRange } from "./utils/npm-install"

static const previewTypes: Record<string, {
  render?: boolean;
  output: "dom" | "html" | "hydrate" | "ast";
}> = {
  "Preview": {
    output: "dom",
    render: true,
  },
  "Compiled (HTML)": {
    output: "html",
    render: false,
  },
  "Compiled (DOM)": {
    output: "dom",
    render: false,
  },
  "AST": {
    output: "ast",
  }
};
export interface Input {
  files: PlaygroundFile[];
  selected: number;
}

let-search-param/markoVersion key="version"
let/availableMarkoVersions=markoVersion ? [markoVersion] : ["next"]
let/previewType="Preview"

lifecycle onMount=async () => {
  const meta = await getPackageMetadata("marko");
  availableMarkoVersions = meta.allVersions
    .filter((v) => v.startsWith("5") || v.startsWith("6"))
    .toSorted((a, b) =>  -a.localeCompare(b, undefined, { numeric: true }));
  markoVersion = getVersionFromRange(meta, markoVersion ?? "next") ?? getVersionFromRange(meta, "next")!;
}

div.output
  div.output-header
    select value:=previewType
      for|option| in=previewTypes
        option -- ${option}
    div
      select value:=markoVersion
        for|version| of=availableMarkoVersions by(version) { return version } 
          option value=version -- marko@${version}
  if=markoVersion
    if=previewTypes[previewType].output === "ast"
      render-ast=input.files selected=input.selected markoVersion=markoVersion
    else if=input.files.length
      render-files=input.files
        ,markoVersion=markoVersion
        ,selected=input.selected
        ,render=previewTypes[previewType].render
        ,output=previewTypes[previewType].output

style --
  .output {
    display: flex;
    flex-direction: column;
    height: 100%;

    .output-header {
      padding: 0 0.5rem;
      margin-bottom: 1rem;
      display: flex;
      justify-content: space-between;
    }
  }
