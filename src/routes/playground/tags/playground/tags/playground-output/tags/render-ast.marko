client import highlighter from "app/util/shiki";
import type { PlaygroundFile } from "../../../playground.marko";
// client import { co../compiler/compile"../utils/compile";
client function compileAst(): any {

}

export interface Input {
  value: PlaygroundFile[];
  selected: number;
}

const/files=input.value

let/compiled=(null as Awaited<ReturnType<typeof compileAst>> | null)
let/showLoadingMessage=false

lifecycle onMount() {
  setTimeout(() => {
    if (compiled === null) {
      showLoadingMessage = true;
    }
  }, 500);
}

script --
  const timeout = setTimeout(() => {
    showLoadingMessage = true;
  }, 500);
  compiled = await compileAst(files, input.markoVersion, files[input.selected].path)
  clearTimeout(timeout);
  showLoadingMessage = false;

if=showLoadingMessage -- Installing Packages...
else if=compiled && "error" in compiled -- ${compiled.error}
else if=compiled -- $!{highlighter.codeToHtml(JSON.stringify(compiled.ast, null, 2), {
  lang: "json",
  defaultColor: false,
  themes: {
    light: "marko-light",
    dark: "marko-dark"
  }
})}
