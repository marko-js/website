import {
  faCompress,
  faExpand,
  faRotateRight,
} from "@fortawesome/free-solid-svg-icons";
import type { CodeToHastOptions } from "shiki";
client import highlighter from "app/util/shiki";
client import { update, type File } from "app/util/workspace";
import { bytesToUnits } from "app/util/sizes";
import { styleToClass } from "app/util/style-to-class";
import * as styles from "./result.style.module.scss";
export interface Input {
  files: File[];
  selected: number;
}
static const compiledHighlightOpts: CodeToHastOptions = {
  lang: "js",
  defaultColor: false,
  themes: {
    light: "marko-light",
    dark: "marko-dark",
  },
  transformers: [
    {
      pre(t) {
        const className = styleToClass(t.properties.style);
        if (className) {
          t.properties.style = undefined;
          this.addClassToHast(t, className);
        }
      },
      tokens(lines) {
        for (const line of lines) {
          for (const token of line) {
            const className = styleToClass(token.htmlStyle);
            if (className) {
              token.htmlStyle = undefined;
              token.htmlAttrs ||= {};
              if (token.htmlAttrs.class) {
                token.htmlAttrs.class += " " + className;
              } else {
                token.htmlAttrs.class = className;
              }
            }
          }
        }
      },
    },
  ],
} as const;

define/Stat|{ name, size }: { name: string; size: number | undefined }|
  if=size !== undefined
    const/{ value, unit }=bytesToUnits(size)
    div
      -- ${name} =${" "}
      strong -- ${value}
      small -- ${unit}

const/selectedFile=(input.files[input.selected]?.path as string | undefined)
let/outputType="preview"
workspace/ws
let-debounce/files=input.files
const/showPreview=!(
  outputType !== "preview" ||
  ws.buildErrors ||
  ws.runtimeErrors
)
let-search-param/debugParam key="debug"
let/debug=!!debugParam valueChange(debug) {
  debugParam = debug ? "1" : null;
}

let-search-param/fullscreenParam key="fullscreen"
let/fullscreen=!!fullscreenParam valueChange(fullscreen) {
  fullscreenParam = fullscreen ? "1" : null;
}
script -- document.documentElement.classList.toggle("fullscreen", fullscreen);
html-script -- ${`document.documentElement.classList.toggle("fullscreen",new URLSearchParams(location.search).get("fullscreen")=="1");`}

const/outputLang=(
  outputType === "previewCSS"
    ? "css"
    : outputType === "previewHTML"
      ? "html"
      : "js"
)
const/compiledCode=(() => {
  if (selectedFile) {
    switch (outputType) {
      case "dom": {
        return debug
          ? ws.markoCompiled?.dom?.[`/tags/${selectedFile}`]?.code
          : ws.previewModules?.[`/tags/${selectedFile}`]?.code;
      }
      case "html":
        return ws.markoCompiled?.html?.[`/tags/${selectedFile}`]?.code;
      case "previewJS":
        return ws.previewJS;
      case "previewCSS":
        return ws.previewCSS;
      case "previewHTML":
        return ws.previewHTML;
    }
  }
})()

div class=styles.result
  div class=styles.controls
    div class=styles.control
      select value:=outputType
        optgroup label="Page"
          option value="preview" -- Preview
          option value="previewJS" -- Bundled JS
          option value="previewCSS" -- Bundled CSS
          option value="previewHTML" -- Rendered HTML
        optgroup label="Compiled"
          option value="dom" -- Client JS
          option value="html" -- Server JS
    div class=styles.control
      label class=styles.checkbox
        -- Debug
        input type="checkbox" checked:=debug

  div class=styles.output
    if=ws.buildErrors
      div class=styles.error
        p -- ${ws.buildErrors.join("\n")}
        p -- Check the devtools console for more information.
    else if=outputType !== "preview"
      div id=styles.compiled
        --
          $!{highlighter.codeToHtml(
            compiledCode || (outputLang === "html" ? "" : "/* empty */"),
            {
              ...compiledHighlightOpts,
              lang: outputLang,
            },
          )}
    else if=ws.runtimeErrors
      div class=styles.error
        p -- ${ws.runtimeErrors.join("\n")}
        p -- Check the devtools console for more information.

    iframe/$frame
      ,title="code output"
      ,class={
        [styles.hide]: !showPreview,
      }
    if=files.length
      script -- update($signal, $frame(), files, !debug);

    a class=styles.markoLogo href="https://markojs.com" title="Built with Marko"
    div class=styles.stats
      if=outputType === "preview"
        Stat name="js" size=(ws.stats?.script?.gzip)
        Stat name="css" size=(ws.stats?.style?.gzip)
        Stat name="html" size=(ws.stats?.markup?.gzip)
        button
          ,class=styles.previewControl
          ,onClick() {
            ($frame as any)().replaceWith(($frame as any)());
          }
          fa-icon=faRotateRight
        button
          ,class=styles.previewControl
          ,onClick() {
            fullscreen = !fullscreen;
          }
          fa-icon=(fullscreen ? faCompress : faExpand)
      else if=outputType === "previewJS"
        Stat name="size" size=(ws.stats?.script?.size)
        Stat name="gzip" size=(ws.stats?.script?.gzip)
      else if=outputType === "previewCSS"
        Stat name="size" size=(ws.stats?.style?.size)
        Stat name="gzip" size=(ws.stats?.style?.gzip)
