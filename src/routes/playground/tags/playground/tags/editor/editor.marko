client import { EditorView } from "@codemirror/view"
import type { File } from "app/util/workspace";
client import extensions, { update } from "./codemirror-extensions";
import * as styles from "./editor.styles.module.scss";

export interface Input {
  files: File[];
  filesChange?: (files: File[]) => void;
  tabIndex?: number;
  tabIndexChange?: (tabIndex: number) => void;
}

let/files:=input.files
let/selected=(input.tabIndex || 0) valueChange=input.tabIndexChange
let/file=files[selected] valueChange(newValue) {
  files = files.toSpliced(selected, 1, newValue);
}

tabs files:=files selected:=selected
.${styles.editor}/$editor

lifecycle<{ editor?: EditorView, change?: boolean, set(v: string): void }>,
  ,set(content) {
    this.change = content !== file.content;
    if (this.change) {
      file = { ...file, content };
    }
  }
  ,onMount() {
    this.change = false;
    this.editor = new EditorView({
      doc: file?.content,
      parent: $editor(),
      extensions: [
        EditorView.updateListener.of((update) => {
          if (update.docChanged) {
            this.set(update.state.doc.toString());
          }
        }),
        ...extensions,
      ],
    });
  }
  ,onUpdate() {
    if (this.change) {
      this.change = false;
    } else if (file) {
      update(
        this.editor!,
        file.content,
        file.path.slice(file.path.lastIndexOf(".") + 1),
      );
    }
  }
  ,onDestroy() {
    this.editor!.destroy();
  }

