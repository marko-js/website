server import type { Element, Parent } from "hast";
server import { h, type Child } from "hastscript";
server import type { ShikiTransformer } from "shiki";
server import highlighter from "app/util/shiki";
server import { toClass, getCSS } from "./shiki-to-class";
static declare module "hast" {
  interface Data {
    append?: Child;
  }
}
export interface Input {
  lang: string;
  text: string;
  markoAlts?: [concise: string, htmlTS: string, conciseTS: string];
  filename?: string;
  theme?: "light" | "dark" | "reverse";
  cursor?: {
    test: RegExp;
    content: (html: typeof h, code: typeof codeToContent) => Child;
  };
  popovers?: {
    test: RegExp;
    content: (html: typeof h, code: typeof codeToContent) => Child;
  }[];
}
server const customTransform: ShikiTransformer = {
  preprocess(code, options) {
    const cursor = options.meta?.cursor as Input["cursor"];
    const popovers = options.meta?.popovers as Input["popovers"];
    if (!(cursor || popovers)) return;

    const decorations = (options.decorations ||= []);
    if (cursor) {
      for (const match of code.matchAll(cursor.test)) {
        const content = cursor.content(h, codeToContent);
        decorations.push({
          start: match.index,
          end: match.index + match[0].length,
          properties: { class: "code-cursor-container" },
          transform(el) {
            appendChild(el, h("span", { class: "code-cursor" }, content));
          },
        });
        break;
      }
    }

    if (popovers) {
      for (const popover of popovers) {
        const content = popover.content(h, codeToContent);
        for (const match of code.matchAll(popover.test)) {
          decorations.push({
            start: match.index,
            end: match.index + match[0].length,
            properties: { class: "code-popover-container" },
            transform(el) {
              appendChild(el, h("span", { class: "code-popover" }, content));
            },
          });
        }
      }
    }
  },
  root(el) {
    const cursor = this.options.meta?.cursor as Input["cursor"];
    const popovers = this.options.meta?.popovers as Input["popovers"];
    if (!(cursor || popovers)) return;
    finalizeNode(el);
  },
};
server function finalizeNode(node: Parent) {
  if (node.data?.append) {
    node.children = node.children.concat(
      node.data.append as typeof node.children,
    );
  }
  for (const child of node.children) {
    if (child.type === "element") {
      finalizeNode(child);
    }
  }
}
server function codeToContent(lang: string, code: string) {
  return highlighter.codeToHast(code, {
    lang,
    defaultColor: false,
    themes: {
      light: "marko-dark",
      dark: "marko-dark",
    },
  }).children as Child;
}
server function appendChild(el: Element, child: Child) {
  el.data ??= {};
  if (el.data.append) {
    el.data.append = [].concat(el.data.append as any, child as any);
  } else {
    el.data.append = child;
  }
}

const/highlight(text: string) {
  return highlighter.codeToHtml(text, {
    lang: input.lang,
    defaultColor: false,
    transformers: [customTransform, toClass($global)],
    themes: {
      light: "marko-light",
      dark: "marko-dark",
    },
    meta: {
      cursor: input.cursor,
      popovers: input.popovers,
    },
  });
}

div class=["code-block", input.theme && `code-block--${input.theme}`]
  if=input.filename
    div.filename -- ${input.filename}
  if=input.markoAlts
    const/[concise, htmlTS, conciseTS]=input.markoAlts
    div.html -- $!{highlight(input.text)}
    div.concise -- $!{highlight(concise)}
    div.html-ts -- $!{highlight(htmlTS)}
    div.concise-ts -- $!{highlight(conciseTS)}
  else -- $!{highlight(input.text)}

const/css=getCSS($global)
if=css
  html-style -- ${css}
