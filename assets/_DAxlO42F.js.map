{"version":3,"file":"_DAxlO42F.js","sources":["../../../src/tags/app-code-block/app-code-block.marko"],"sourcesContent":["server import type { Element, Parent } from \"hast\";\nserver import { h, type Child } from \"hastscript\";\nserver import type { ShikiTransformer } from \"shiki\";\nserver import highlighter from \"app/util/shiki\";\nserver import { toClass, getCSS } from \"./shiki-to-class\";\nstatic declare module \"hast\" {\n  interface Data {\n    append?: Child;\n  }\n}\nexport interface Input {\n  lang: string;\n  text: string;\n  markoAlts?: [concise: string, htmlTS: string, conciseTS: string];\n  filename?: string;\n  theme?: \"light\" | \"dark\" | \"reverse\";\n  cursor?: {\n    test: RegExp;\n    content: (html: typeof h, code: typeof codeToContent) => Child;\n  };\n  popovers?: {\n    test: RegExp;\n    content: (html: typeof h, code: typeof codeToContent) => Child;\n  }[];\n}\nserver const customTransform: ShikiTransformer = {\n  preprocess(code, options) {\n    const cursor = options.meta?.cursor as Input[\"cursor\"];\n    const popovers = options.meta?.popovers as Input[\"popovers\"];\n    if (!(cursor || popovers)) return;\n\n    const decorations = (options.decorations ||= []);\n    if (cursor) {\n      for (const match of code.matchAll(cursor.test)) {\n        const content = cursor.content(h, codeToContent);\n        decorations.push({\n          start: match.index,\n          end: match.index + match[0].length,\n          properties: { class: \"code-cursor-container\" },\n          transform(el) {\n            appendChild(el, h(\"span\", { class: \"code-cursor\" }, content));\n          },\n        });\n        break;\n      }\n    }\n\n    if (popovers) {\n      for (const popover of popovers) {\n        const content = popover.content(h, codeToContent);\n        for (const match of code.matchAll(popover.test)) {\n          decorations.push({\n            start: match.index,\n            end: match.index + match[0].length,\n            properties: { class: \"code-popover-container\" },\n            transform(el) {\n              appendChild(el, h(\"span\", { class: \"code-popover\" }, content));\n            },\n          });\n        }\n      }\n    }\n  },\n  root(el) {\n    const cursor = this.options.meta?.cursor as Input[\"cursor\"];\n    const popovers = this.options.meta?.popovers as Input[\"popovers\"];\n    if (!(cursor || popovers)) return;\n    finalizeNode(el);\n  },\n};\nserver function finalizeNode(node: Parent) {\n  if (node.data?.append) {\n    node.children = node.children.concat(\n      node.data.append as typeof node.children,\n    );\n  }\n  for (const child of node.children) {\n    if (child.type === \"element\") {\n      finalizeNode(child);\n    }\n  }\n}\nserver function codeToContent(lang: string, code: string) {\n  return highlighter.codeToHast(code, {\n    lang,\n    defaultColor: false,\n    themes: {\n      light: \"marko-dark\",\n      dark: \"marko-dark\",\n    },\n  }).children as Child;\n}\nserver function appendChild(el: Element, child: Child) {\n  el.data ??= {};\n  if (el.data.append) {\n    el.data.append = [].concat(el.data.append as any, child as any);\n  } else {\n    el.data.append = child;\n  }\n}\n\nconst/highlight(text: string) {\n  return highlighter.codeToHtml(text, {\n    lang: input.lang,\n    defaultColor: false,\n    transformers: [customTransform, toClass($global)],\n    themes: {\n      light: \"marko-light\",\n      dark: \"marko-dark\",\n    },\n    meta: {\n      cursor: input.cursor,\n      popovers: input.popovers,\n    },\n  });\n}\n\ndiv class=[\"code-block\", input.theme && `code-block--${input.theme}`]\n  if=input.filename\n    div.filename -- ${input.filename}\n  if=input.markoAlts\n    const/[concise, htmlTS, conciseTS]=input.markoAlts\n\n    if=htmlTS\n      div.html -- $!{highlight(input.text)}\n      div.html-ts -- $!{highlight(htmlTS)}\n    else\n      div.html.html-ts -- $!{highlight(input.text)}\n\n    if=conciseTS\n      div.concise -- $!{highlight(concise)}\n      div.concise-ts -- $!{highlight(conciseTS)}\n    else\n      div.concise.concise-ts -- $!{highlight(concise)}\n\n  else -- $!{highlight(input.text)}\n\nconst/css=getCSS($global)\nif=css\n  html-style -- ${css}\n"],"names":["$highlight","$scope","input_lang","input_cursor","input_popovers","text","highlighter","codeToHtml","lang","defaultColor","transformers","customTransform","toClass","$global","themes","light","dark","meta","cursor","popovers","_"],"mappings":"mCAyIyB,SAAAA,EAAAC,EAAA,CAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,CAAA,EAAAH,EAAA,CAAA,OApCV,SAACI,EAAY,CAC1B,OAAOC,YAAYC,WAAWF,EAAM,CAClCG,KAAMN,EACNO,aAAc,GACdC,aAAc,CAACC,gBAAiBC,QAAOX,EAAAY,OAAQ,CAAC,EAChDC,OAAQ,CACNC,MAAO,cACPC,KAAM,YAAA,EAERC,KAAM,CACJC,OAAQf,EACRgB,SAAUf,CAAAA,CACZ,CACD,CAAE,CACJ,CAAAgB,EAAA,KAAApB,CAAA"}